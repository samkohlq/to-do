{"version":3,"sources":["actions/createTodo.js","containers/AddTodo.js","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.js","actions/retrieveTodos.js","actions/updateTodo.js","actions/setVisibilityFilter.js","components/Link.js","containers/FilterLink.js","components/Filter.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","configureStore.js","index.js"],"names":["createTodo","value","dispatch","type","requestCreateTodo","fetch","method","headers","body","JSON","stringify","then","response","console","log","json","todoCreated","connect","input","Form","onSubmit","e","preventDefault","trim","InputGroup","ref","node","Append","Button","size","Todo","onClick","completed","ListGroup","Item","className","style","textDecoration","TodoList","this","props","retrieveTodos","todos","updateTodo","variant","map","todo","key","id","React","Component","getVisibleTodos","filter","t","state","visibilityFilter","requestUpdateTodo","receiveUpdateTodoSuccess","VisibilityFilters","Link","active","children","href","ownProps","setVisibilityFilter","Filter","FilterLink","App","Container","Row","VisibleTodoList","initialState","isFetching","action","SHOW_ALL","combineReducers","loggerMiddleware","createLogger","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","document","getElementById"],"mappings":"iOAUaA,EAAa,SAAAC,GACxB,OAAO,SAAAC,GAEL,OADAA,EAZ6B,SAAAD,GAAK,MAAK,CACzCE,KAAM,sBACNF,SAUWG,CAAkBH,IAEzBI,MAAM,yDAA0D,CAC9DC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CACnBT,YAKDU,MAAK,SAAAC,GAEJ,OADAC,QAAQC,IAAIF,GACLA,EAASG,UAGjBJ,MAAK,SAAAI,GAEJ,OADAF,QAAQC,IAAIC,GACLb,EA3BuC,CACtDC,KAAM,8BACNa,YAyBiDD,SCapCE,iBAvCC,SAAC,GAAkB,IAC7BC,EADahB,EAAe,EAAfA,SAEjB,OACE,6BACE,kBAACiB,EAAA,EAAD,CAEEC,SAAU,SAAAC,GACRA,EAAEC,iBAEGJ,EAAMjB,MAAMsB,SAIjBrB,EAASF,EAAWkB,EAAMjB,QAE1BiB,EAAMjB,MAAQ,MAIhB,kBAACuB,EAAA,EAAD,KACE,2BAEEC,IAAK,SAAAC,GACHR,EAAQQ,KAIZ,kBAACF,EAAA,EAAWG,OAAZ,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,KAAK1B,KAAK,UAAvB,mB,gDCXG2B,EAnBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAW/B,EAAvB,EAAuBA,MAAvB,OACX,kBAACgC,EAAA,EAAUC,KAAX,CACEC,UAAU,QACVJ,QAASA,EACTK,MAAO,CACLC,eAAgBL,EAAY,eAAiB,SAG9C/B,ICwBUqC,E,4LA5BXC,KAAKC,MAAMC,kB,+BAGJ,MAEuBF,KAAKC,MAA3BE,EAFD,EAECA,MAAOC,EAFR,EAEQA,WACf,OACE,kBAACV,EAAA,EAAD,CAAWW,QAAQ,SAChBF,EAAMG,KAAI,SAAAC,GAAI,OACb,kBAAC,EAAD,eAAMC,IAAKD,EAAKE,IAAQF,EAAxB,CAA8Bf,QAAS,kBAAMY,EAAWG,EAAKE,gB,GAZhDC,IAAMC,WCIvBC,EAAkB,SAACT,EAAOU,GAC9B,OAAQA,GACN,IAAK,WACH,OAAOV,EACT,IAAK,iBACH,OAAOA,EAAMU,QAAO,SAAAC,GAAC,OAAIA,EAAErB,aAC7B,IAAK,cACH,OAAOU,EAAMU,QAAO,SAAAC,GAAC,OAAKA,EAAErB,aAC9B,QACE,OAAOU,IAkCEzB,eA1BS,SAAAqC,GACtB,MAAO,CACLZ,MAAOS,EAAgBG,EAAMZ,MAAMA,MAAOY,EAAMC,sBAOzB,SAAArD,GACzB,MAAO,CACLF,WAAY,SAAAC,GAEVC,EAASF,EAAWC,KAEtBwC,cAAe,WAEbvC,GCjCG,SAAAA,GAEL,OADAA,EAX+B,CACjCC,KAAM,kBAWGE,MAAM,6DACVM,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAI,GAAI,OAAIb,EAVkB,CACpCC,KAAM,gBACNuC,MAQwC3B,WD+BtC4B,WAAY,SAAAK,GAEV9C,EErCoB,SAAA8C,GACxB,OAAO,SAAA9C,GAEL,OADAA,EAZ6B,SAAA8C,GAAE,MAAK,CACtC7C,KAAM,sBACN6C,MAUWQ,CAAkBR,IAEzB3C,MAAM,yDAA0D,CAC9DC,OAAQ,MACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEsC,SAItBrC,MAAK,SAAAC,GACJ,OAAOA,EAASG,UAGjBJ,MAAK,SAAAI,GACJ,OAAOb,EAvBuB,SAAA8C,GAAE,MAAK,CAC7C7C,KAAM,8BACN6C,MAqBwBS,CAAyB1C,EAAKiC,SFmBzCL,CAAWK,QAKX/B,CAA6CqB,GGhDrD,IAAMoB,EACD,WADCA,EAEK,iBAFLA,EAGE,cCoBAC,EAxBF,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,SAAU9B,EAAc,EAAdA,QAChC,OAAI6B,EACK,8BAAOC,GAGd,uBACEC,KAAK,YACL/B,QAAS,SAAAV,GACPA,EAAEC,iBACFS,MAGD8B,ICSQ5C,eAjBS,SAACqC,EAAOS,GAC9B,MAAO,CACLH,OAAQG,EAASX,SAAWE,EAAMU,wBAOX,SAAC9D,EAAU6D,GACpC,MAAO,CACLhC,QAAS,WACP7B,EFlBG,CAAEC,KAAM,wBAAyBiD,OEkBPW,EAASX,aAK7BnC,CAA6C0C,GCV7CM,EAVA,kBACb,uBAAG9B,UAAU,SAAb,SACQ,kBAAC+B,EAAD,CAAYd,OAAQM,GAApB,OACL,MACD,kBAACQ,EAAD,CAAYd,OAAQM,GAApB,UACC,MACD,kBAACQ,EAAD,CAAYd,OAAQM,GAApB,eCUWS,EAdH,kBACV,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKlC,UAAU,QACb,kBAAC,EAAD,OAEF,kBAACkC,EAAA,EAAD,CAAKlC,UAAU,QACb,kBAAC,EAAD,OAEF,kBAACkC,EAAA,EAAD,KACE,kBAACC,EAAD,S,sCCfAC,EAAe,CACnBC,YAAY,EACZ9B,MAAO,IAkEMA,MA9Df,WAA8C,IAA/BY,EAA8B,uDAAtBiB,EAAcE,EAAQ,uCAC3C,OAAQA,EAAOtE,MACb,IAAK,sBACH,OAAO,eAEFmD,EAFL,CAGEkB,YAAY,IAEhB,IAAK,8BACH,OAAO,eACFlB,EADL,CAEEkB,YAAY,EACZ9B,MAAM,GAAD,mBACAY,EAAMZ,OADN,CAEH,CACEM,GAAIyB,EAAOzD,YAAYgC,GACvB/C,MAAOwE,EAAOzD,YAAYf,MAC1B+B,UAAWyC,EAAOzD,YAAYgB,eAItC,IAAK,gBACH,OAAO,eACFsB,EADL,CAEEkB,YAAY,IAEhB,IAAK,gBACH,OAAO,eACFlB,EADL,CAEEkB,YAAY,EACZ9B,MAAO+B,EAAO/B,QAElB,IAAK,sBACH,OAAO,eACFY,EADL,CAEEZ,MAAOY,EAAMZ,MAAMG,KAAI,SAAAC,GAGrB,OAAOA,EAAKE,KAAOyB,EAAOzB,GAAnB,eAEEF,EAFF,CAGD0B,YAAY,IAEd1B,OAGV,IAAK,8BACH,OAAO,eACFQ,EADL,CAEEZ,MAAOY,EAAMZ,MAAMG,KAAI,SAAAC,GAGrB,OAAOA,EAAKE,KAAOyB,EAAOzB,GAAnB,eACEF,EADF,CACQ0B,YAAY,EAAOxC,WAAYc,EAAKd,YAC/Cc,OAGV,QACE,OAAOQ,IC9DLoB,EAAahB,EAYNH,MATf,WAAqD,IAA3BD,EAA0B,uDAAlBoB,EAAUD,EAAQ,uCAClD,OAAQA,EAAOtE,MACb,IAAK,wBACH,OAAOsE,EAAOrB,OAChB,QACE,OAAOE,ICNEqB,cAAgB,CAC7BjC,QACAa,qBCAIqB,EAAmBC,yBCCnBC,EDEJC,YAAYC,EAAaC,YAAgBC,IAAiBN,ICA5DO,iBAGE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,W","file":"static/js/main.3a867829.chunk.js","sourcesContent":["export const requestCreateTodo = value => ({\n  type: \"REQUEST_CREATE_TODO\",\n  value\n});\n\nexport const receiveCreateTodoSuccess = todoCreated => ({\n  type: \"RECEIVE_CREATE_TODO_SUCCESS\",\n  todoCreated\n});\n\nexport const createTodo = value => {\n  return dispatch => {\n    dispatch(requestCreateTodo(value));\n    return (\n      fetch(\"https://intense-refuge-66191.herokuapp.com/create-todo\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          value\n        })\n      })\n        // only runs when promise returned by fetch is successful\n        // pulls out body of json and converts it to json\n        .then(response => {\n          console.log(response);\n          return response.json();\n        })\n        // takes in value of new todo and dispatches receiveCreateTodoSuccess action\n        .then(json => {\n          console.log(json);\n          return dispatch(receiveCreateTodoSuccess(json));\n        })\n    );\n  };\n};\n","import React from \"react\";\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { createTodo } from \"../actions/createTodo\";\n\n// defines both logic and presentation - ok for small components\nconst AddTodo = ({ dispatch }) => {\n  let input;\n  return (\n    <div>\n      <Form\n        // onSubmit is the event hook\n        onSubmit={e => {\n          e.preventDefault();\n          // if no input, return\n          if (!input.value.trim()) {\n            return;\n          }\n          // dispatch user's input to store\n          dispatch(createTodo(input.value));\n          // reset input value to blank\n          input.value = \"\";\n        }}\n      >\n        {/* shows text box */}\n        <InputGroup>\n          <input\n            // assign input node to input variable\n            ref={node => {\n              input = node;\n            }}\n          />\n          {/* calls onSubmit function in form component */}\n          <InputGroup.Append>\n            <Button size=\"sm\" type=\"submit\">\n              Add Todo\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n    </div>\n  );\n};\n\n// export connected component, ready for import somewhere else\nexport default connect()(AddTodo);\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\n\nconst Todo = ({ onClick, completed, value }) => (\n  <ListGroup.Item\n    className=\"small\"\n    onClick={onClick}\n    style={{\n      textDecoration: completed ? \"line-through\" : \"none\"\n    }}\n  >\n    {value}\n  </ListGroup.Item>\n);\n\n// validations\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  value: PropTypes.string.isRequired\n};\n\nexport default Todo;\n","import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { ListGroup } from \"react-bootstrap\";\nimport Todo from \"./Todo\";\n\nclass TodoList extends React.Component {\n  // retrieve data when component has mounted\n  componentDidMount() {\n    this.props.retrieveTodos();\n  }\n\n  render() {\n    // deconstructing object and extracting todos, updateTodo\n    const { todos, updateTodo } = this.props;\n    return (\n      <ListGroup variant=\"flush\">\n        {todos.map(todo => (\n          <Todo key={todo.id} {...todo} onClick={() => updateTodo(todo.id)} />\n        ))}\n      </ListGroup>\n    );\n  }\n}\n\n// validations\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      completed: PropTypes.bool.isRequired,\n      value: PropTypes.string.isRequired\n    }).isRequired\n  ).isRequired,\n  updateTodo: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","import { connect } from \"react-redux\";\n\n// import { createTodo } from \"../actions\";\nimport { createTodo } from \"../actions/createTodo\";\nimport { updateTodo } from \"../actions/updateTodo\";\nimport { retrieveTodos } from \"../actions/retrieveTodos\";\nimport TodoList from \"../components/TodoList\";\n\n// returns an array, filtered if a filter is present\nconst getVisibleTodos = (todos, filter) => {\n  switch (filter) {\n    case \"SHOW_ALL\":\n      return todos;\n    case \"SHOW_COMPLETED\":\n      return todos.filter(t => t.completed);\n    case \"SHOW_ACTIVE\":\n      return todos.filter(t => !t.completed);\n    default:\n      return todos;\n  }\n};\n\n// extracts specific data from the store\n// passes in todos array and visibility filter in current state, calls getVisibleTodos,\n// returns array returned from getVisibleTodos\n// https://react-redux.js.org/using-react-redux/connect-mapstate\nconst mapStateToProps = state => {\n  return {\n    todos: getVisibleTodos(state.todos.todos, state.visibilityFilter)\n  };\n};\n\n// dispatches actions to the store\n// sends new object to store\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\nconst mapDispatchToProps = dispatch => {\n  return {\n    createTodo: value => {\n      // dispatch createTodo action\n      dispatch(createTodo(value));\n    },\n    retrieveTodos: () => {\n      // dispatch retrieveTodo action\n      dispatch(retrieveTodos());\n    },\n    updateTodo: id => {\n      // dispatch updateTodo action on click\n      dispatch(updateTodo(id));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList);\n","export const requestTodos = () => ({\n  type: \"REQUEST_TODOS\"\n});\n\nexport const receiveTodos = todos => ({\n  type: \"RECEIVE_TODOS\",\n  todos\n});\n\nexport const retrieveTodos = () => {\n  return dispatch => {\n    dispatch(requestTodos());\n    return fetch(\"https://intense-refuge-66191.herokuapp.com/retrieve-todos\")\n      .then(response => response.json())\n      .then(json => dispatch(receiveTodos(json)));\n  };\n};\n","export const requestUpdateTodo = id => ({\n  type: \"REQUEST_UPDATE_TODO\",\n  id\n});\n\nexport const receiveUpdateTodoSuccess = id => ({\n  type: \"RECEIVE_UPDATE_TODO_SUCCESS\",\n  id\n});\n\nexport const updateTodo = id => {\n  return dispatch => {\n    dispatch(requestUpdateTodo(id));\n    return (\n      fetch(\"https://intense-refuge-66191.herokuapp.com/update-todo\", {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({ id })\n      })\n        // only runs when promise returned by fetch is successful\n        // pulls out body of json and converts it to json\n        .then(response => {\n          return response.json();\n        })\n        // takes in id of todo and dispatches receiveUpdateTodoSuccess action\n        .then(json => {\n          return dispatch(receiveUpdateTodoSuccess(json.id));\n        })\n    );\n  };\n};\n","export function setVisibilityFilter(filter) {\n  return { type: \"SET_VISIBILITY_FILTER\", filter };\n}\n\nexport const VisibilityFilters = {\n  SHOW_ALL: \"SHOW_ALL\",\n  SHOW_COMPLETED: \"SHOW_COMPLETED\",\n  SHOW_ACTIVE: \"SHOW_ACTIVE\"\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Link = ({ active, children, onClick }) => {\n  if (active) {\n    return <span>{children}</span>;\n  }\n  return (\n    <a\n      href=\"#somelink\"\n      onClick={e => {\n        e.preventDefault();\n        onClick();\n      }}\n    >\n      {children}\n    </a>\n  );\n};\n\n// validations\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n};\n\nexport default Link;\n","import { connect } from \"react-redux\";\n\nimport { setVisibilityFilter } from \"../actions/setVisibilityFilter\";\nimport Link from \"../components/Link\";\n\n// extracts data from the store\n// https://react-redux.js.org/using-react-redux/connect-mapstate\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    active: ownProps.filter === state.setVisibilityFilter\n  };\n};\n\n// dispatches actions to the store\n// sends new object to store\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    onClick: () => {\n      dispatch(setVisibilityFilter(ownProps.filter));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Link);\n","import React from \"react\";\nimport { VisibilityFilters } from \"../actions/setVisibilityFilter\";\nimport FilterLink from \"../containers/FilterLink\";\n\nconst Filter = () => (\n  <p className=\"small\">\n    Show: <FilterLink filter={VisibilityFilters.SHOW_ALL}>All</FilterLink>\n    {\" / \"}\n    <FilterLink filter={VisibilityFilters.SHOW_ACTIVE}>Active</FilterLink>\n    {\" / \"}\n    <FilterLink filter={VisibilityFilters.SHOW_COMPLETED}>Completed</FilterLink>\n  </p>\n);\n\nexport default Filter;\n","import React from \"react\";\nimport { Container, Row } from \"react-bootstrap\";\nimport AddTodo from \"../containers/AddTodo\";\nimport VisibleTodoList from \"../containers/VisibleTodoList\";\nimport Filter from \"./Filter\";\n\nconst App = () => (\n  <Container>\n    <Row className=\"mt-5\">\n      <AddTodo />\n    </Row>\n    <Row className=\"my-2\">\n      <Filter />\n    </Row>\n    <Row>\n      <VisibleTodoList />\n    </Row>\n  </Container>\n);\n\nexport default App;\n","const initialState = {\n  isFetching: false,\n  todos: []\n};\n\n// initialises state to be an empty array\nfunction todos(state = initialState, action) {\n  switch (action.type) {\n    case \"REQUEST_CREATE_TODO\":\n      return {\n        // spread operator that creates a copy of the array in state\n        ...state,\n        isFetching: true\n      };\n    case \"RECEIVE_CREATE_TODO_SUCCESS\":\n      return {\n        ...state,\n        isFetching: false,\n        todos: [\n          ...state.todos,\n          {\n            id: action.todoCreated.id,\n            value: action.todoCreated.value,\n            completed: action.todoCreated.completed\n          }\n        ]\n      };\n    case \"REQUEST_TODOS\":\n      return {\n        ...state,\n        isFetching: true\n      };\n    case \"RECEIVE_TODOS\":\n      return {\n        ...state,\n        isFetching: false,\n        todos: action.todos\n      };\n    case \"REQUEST_UPDATE_TODO\":\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          // if todo.id matches action.id, copy everything else from state\n          // and set isFetching to true\n          return todo.id === action.id\n            ? {\n                ...todo,\n                isFetching: true\n              }\n            : todo;\n        })\n      };\n    case \"RECEIVE_UPDATE_TODO_SUCCESS\":\n      return {\n        ...state,\n        todos: state.todos.map(todo => {\n          // if todo.id matches action.id, copy everything else from state,\n          // set isFetching to false and flip completed status\n          return todo.id === action.id\n            ? { ...todo, isFetching: false, completed: !todo.completed }\n            : todo;\n        })\n      };\n    default:\n      return state;\n  }\n}\n\nexport default todos;\n","import { VisibilityFilters } from \"../actions/setVisibilityFilter\";\n\nconst { SHOW_ALL } = VisibilityFilters;\n\n// initialises state to be the \"SHOW_ALL\" string\nfunction visibilityFilter(state = SHOW_ALL, action) {\n  switch (action.type) {\n    case \"SET_VISIBILITY_FILTER\":\n      return action.filter;\n    default:\n      return state;\n  }\n}\n\nexport default visibilityFilter;\n","import { combineReducers } from \"redux\";\nimport todos from \"./todos\";\nimport visibilityFilter from \"./visibilityFilter\";\n\nexport default combineReducers({\n  todos,\n  visibilityFilter\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\n\nimport rootReducer from \"./reducers\";\n\nconst loggerMiddleware = createLogger();\n\nexport default () =>\n  createStore(rootReducer, applyMiddleware(thunkMiddleware, loggerMiddleware));\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport configureStore from \"./configureStore\";\n\nconst store = configureStore();\n\nrender(\n  // https://react-redux.js.org/api/provider\n  // <Provider /> makes the Redux store available to any nested components wrapped in the connect() function\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}